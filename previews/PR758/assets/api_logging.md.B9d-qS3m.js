import{_ as s,c as a,o as n,aA as e}from"./chunks/framework.Cew-eY2c.js";const r=JSON.parse('{"title":"Runtime and Compiler Logging","description":"","frontmatter":{},"headers":[],"relativePath":"api/logging.md","filePath":"api/logging.md","lastUpdated":null}'),t={name:"api/logging.md"};function l(h,i,p,g,k,o){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="Runtime-and-Compiler-Logging" tabindex="-1">Runtime and Compiler Logging <a class="header-anchor" href="#Runtime-and-Compiler-Logging" aria-label="Permalink to &quot;Runtime and Compiler Logging {#Runtime-and-Compiler-Logging}&quot;">â€‹</a></h1><p>AMDGPU.jl has a built-in logging system integrated into various runtime and compiler operations, which is provided by TimespanLogging.jl. Operations such as compilation and linking, signal and buffer allocation/freeing, kernel launch, etc. are instrumented with logging statements, allowing the user to record the start and end of operations.</p><p>While disabled by default, logging can be enabled by first running <code>AMDGPU.Runtime.enable_logging!()</code> to globally enable logging, after which Julia must be restarted for the changes to take effect.</p><p>Once logging is globally enabled, <code>AMDGPU.Runtime.start_logging()</code> causes new log events to be saved, while <code>AMDGPU.Runtime.stop_logging()</code> causes new log events to be discarded. Log events can be collected with <code>AMDGPU.Runtime.fetch_logs!()</code>. A more convenient option is <code>AMDGPU.Runtime.log_and_fetch!(f)</code>, which can be used to easily log operations within a region of code:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Runtime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">log_and_fetch!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(A)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    fill!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(B, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(B)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logs[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div>`,5)]))}const E=s(t,[["render",l]]);export{r as __pageData,E as default};
