import{_ as i,c as a,o as t,aj as n}from"./chunks/framework.C6RYwruW.js";const e="/previews/PR759/assets/profiling-1.DrJOQDKM.png",l="/previews/PR759/assets/profiling-4.uQ3oVy-s.png",h="/previews/PR759/assets/profiling-2.22Dt5KX5.png",p="/previews/PR759/assets/profiling-3.BL_HWJLJ.png",F=JSON.parse('{"title":"Profiling","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/profiling.md","filePath":"tutorials/profiling.md","lastUpdated":null}'),k={name:"tutorials/profiling.md"};function r(d,s,g,E,o,y){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="profiling" tabindex="-1">Profiling <a class="header-anchor" href="#profiling" aria-label="Permalink to &quot;Profiling&quot;">​</a></h1><h2 id="rocprof" tabindex="-1">rocprof <a class="header-anchor" href="#rocprof" aria-label="Permalink to &quot;rocprof&quot;">​</a></h2><p><a href="https://github.com/ROCm/rocprofiler?tab=readme-ov-file#rocprofiler-v2" target="_blank" rel="noreferrer">rocprofv2</a> allows profiling both HSA &amp; HIP API calls (rocprof being deprecated).</p><p>Let&#39;s profile simple copying kernel saved in <code>profile.jl</code> file:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AMDGPU</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mycopy!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dst, src)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> workitemIdx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">workgroupIdx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> workgroupDim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">≤</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dst)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        @inbounds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dst[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src[i]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(N)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ROCArray{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(undef, N)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dst </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ROCArray{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(undef, N)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    groupsize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 256</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               # nthreads</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gridsize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(N, groupsize)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># nblocks</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        @roc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> groupsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">groupsize gridsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gridsize </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mycopy!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dst, src)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">synchronize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">unsafe_free!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dst)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">unsafe_free!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(src)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">synchronize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ENABLE_JITPROFILING</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rocprofv2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --plugin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> perfetto</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hip-trace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hsa-trace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kernel-trace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prof</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> julia</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./profile.jl</span></span></code></pre></div><p>This will produce <code>prof_output.pftrace</code> file which can be visualized using <a href="https://ui.perfetto.dev/" target="_blank" rel="noreferrer">Perfetto UI</a>.</p><table tabindex="0"><thead><tr><th style="text-align:center;">Zoomed out</th><th style="text-align:center;">Zoomed in</th></tr></thead><tbody><tr><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><img src="`+e+'" alt=""></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><img src="'+l+`" alt=""></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table><p>Here we can clearly see that host synchronization after each kernel dispatch causes poor device occupancy (empty spaces between kernel dispatches).</p><p>We can fix this by moving synchronization outside the loop so that it happens only once.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        @roc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> groupsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">groupsize gridsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gridsize </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mycopy!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dst, src)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">synchronize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span></code></pre></div><p>Running profiling again and visualizing results we now see that kernel launches are adjacent to each other and that the average wall duration is lower.</p><table tabindex="0"><thead><tr><th style="text-align:center;">Zoomed out</th><th style="text-align:center;">Zoomed in</th></tr></thead><tbody><tr><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><img src="`+h+'" alt=""></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><img src="'+p+'" alt=""></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table><h2 id="debugging" tabindex="-1">Debugging <a class="header-anchor" href="#debugging" aria-label="Permalink to &quot;Debugging&quot;">​</a></h2><p>Use <code>HIP_LAUNCH_BLOCKING=1</code> to synchronize immediately after launching GPU kernels. This will allow to pinpoint exact kernel that caused the exception.</p>',15)]))}const C=i(k,[["render",r]]);export{F as __pageData,C as default};
