import{_ as h,C as e,c as k,o as r,aj as d,G as n,w as l,j as s,a as i}from"./chunks/framework.ZMpVshv0.js";const f=JSON.parse('{"title":"Performance Tips","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/perf.md","filePath":"tutorials/perf.md","lastUpdated":null}'),o={name:"tutorials/perf.md"};function c(E,a,g,y,u,F){const t=e("PluginTabsTab"),p=e("PluginTabs");return r(),k("div",null,[a[2]||(a[2]=d(`<h1 id="Performance-Tips" tabindex="-1">Performance Tips <a class="header-anchor" href="#Performance-Tips" aria-label="Permalink to &quot;Performance Tips {#Performance-Tips}&quot;">​</a></h1><h2 id="Use-Caching-Memory-Allocator" tabindex="-1">Use Caching Memory Allocator <a class="header-anchor" href="#Use-Caching-Memory-Allocator" aria-label="Permalink to &quot;Use Caching Memory Allocator {#Use-Caching-Memory-Allocator}&quot;">​</a></h2><p>Julia relies on Garbage-Collection (GC) for memory management, because of that it will not free <code>ROCArrays</code> immediately as they are no longer used.</p><p>In tight loops with lots of GPU allocations this will put a lot of pressure on the allocator and may interfere with other programs that use that GPU.</p><p>Using <a href="https://juliagpu.github.io/GPUArrays.jl/dev/interface/#Caching-Allocator" target="_blank" rel="noreferrer">caching allocator</a> gives users a precise control of GPU memory, even if the allocations happen in code that&#39;s not controlled by the user.</p><p>You should use <code>GPUArrays.@cached</code> around parts of the code with repeating memory allocation patterns, for example, on the training loops.</p><p>Example below requires <code>8 MiB</code> of VRAM per iteration. In the worst case (if GC does not kick in) it would quickly fill up to <code>8 GiB</code> of VRAM, but with caching allocator it uses exactly <code>8 MiB</code>, which you can then immediately free to reclaim the memory.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cache </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GPUArrays</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AllocCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AllocCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n_free</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n_busy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sizeof</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytes)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           GPUArrays</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@cached</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cache </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">begin</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               sin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.(AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Float32, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cache</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AllocCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n_free</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n_busy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sizeof</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8.000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MiB)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GPUArrays</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">unsafe_free!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cache)</span></span></code></pre></div><p>For a more sophisticated real-world example, see how <a href="https://github.com/JuliaNeuralGraphics/GaussianSplatting.jl/blob/e4ef1324c187371e336bef875b053023afe7fb2c/src/training.jl#L183" target="_blank" rel="noreferrer">GaussianSplatting.jl</a> handles it.</p><h2 id="Avoid-triggering-Hostcalls" tabindex="-1">Avoid triggering Hostcalls <a class="header-anchor" href="#Avoid-triggering-Hostcalls" aria-label="Permalink to &quot;Avoid triggering Hostcalls {#Avoid-triggering-Hostcalls}&quot;">​</a></h2><p>Some functions in the kernel may cause an exception, capturing the original value of the variable that caused it. These are usually related to float-to-integer conversion, so functions like <code>Int(1.0), ceil(Int, 1.0), floor(Int, 1.0)</code> will cause it.</p><p>This will perform dynamic memory allocation and launch a <code>Hostcall</code> for that, which will sit in the background thread until kernel finishes execution and the user synchronizes the <code>stream</code>. Having a hostcall unnecessarily slows execution down and you can avoid that by using &quot;GPU-friendly&quot; version of the function.</p><div class="tip custom-block"><p class="custom-block-title">Hostcalls</p><p>Hostcalls should be used mostly for debugging. When performance matters, they should be avoided.</p></div><p>For example, let&#39;s see how we may deal with <code>ceil(Int, x)</code> and convert it to GPU-friendly version.</p><p>Starting with the bad example:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bad_kernel!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y, x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           @inbounds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ceil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Int, x[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           return</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bad_kernel! (generic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> with </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> method)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ROCArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Float32[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ROCArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">zeros</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Int, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @roc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bad_kernel!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y, x);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">┌ Info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Global hostcalls detected!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MethodInstance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bad_kernel!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AMDGPU.Device.ROCDeviceVector{Int64, 1}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AMDGPU.Device.ROCDeviceVector{Float32, 1}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Hostcalls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:malloc_hostcall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│ Use </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`AMDGPU.synchronize(; stop_hostcalls=true)\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to synchronize and stop them.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">└ Otherwise, performance might degrade </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> they keep running </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> the background.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element ROCArray{Int64, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Runtime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Mem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HIPBuffer}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">synchronize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; stop_hostcalls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ Info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Stopped </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hostcall</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`malloc_hostcall\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span></code></pre></div><p>Here we can see that using &quot;un-optimized&quot; version of <code>ceil(Int, x[1])</code> causes a <code>malloc_hostcall</code> to be launched. Which we then have to stop by passing <code>stop_hostcalls=true</code> to the synchronization functions.</p><p>We can avoid this by using &quot;unsafe&quot; version that avoids checking for errors under-the-hood.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> good_kernel!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y, x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           @inbounds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unsafe_trunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Int, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ceil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           return</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">good_kernel! (generic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> with </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> method)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fill!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @roc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> good_kernel!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y, x);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">synchronize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; stop_hostcalls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Nothing is printed, so no hostcall was launched &amp; stopped.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element ROCArray{Int64, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Runtime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Mem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HIPBuffer}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div><p>By doing <code>ceil(x[1])</code> first, then &quot;unsafely&quot; converting <code>Float32</code> to <code>Int</code> we can avoid error-checking &amp; hostcalls.</p><p>We can compare LLVM IR of the function that converts <code>Float32</code> to <code>Int</code> to see how they differ:</p>`,21)),n(p,null,{default:l(()=>[n(t,{label:"unsafe_trunc(Int, 1.0)"},{default:l(()=>a[0]||(a[0]=[s("div",{class:"language-julia vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"julia"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"using"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," InteractiveUtils")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"InteractiveUtils"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"@code_llvm"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," unsafe_trunc"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(Int, "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"1.0"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")])])])],-1),s("div",{class:"language- vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"}),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",null,";  @ float.jl:336 within `unsafe_trunc`")]),i(`
`),s("span",{class:"line"},[s("span",null,"define i64 @julia_unsafe_trunc_6476(double %0) #0 {")]),i(`
`),s("span",{class:"line"},[s("span",null,"top:")]),i(`
`),s("span",{class:"line"},[s("span",null,"  %1 = fptosi double %0 to i64")]),i(`
`),s("span",{class:"line"},[s("span",null,"  %2 = freeze i64 %1")]),i(`
`),s("span",{class:"line"},[s("span",null,"  ret i64 %2")]),i(`
`),s("span",{class:"line"},[s("span",null,"}")])])])],-1)])),_:1,__:[0]}),n(t,{label:"Int(1.0)"},{default:l(()=>a[1]||(a[1]=[s("div",{class:"language-julia vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"julia"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"using"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," InteractiveUtils")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"InteractiveUtils"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"@code_llvm"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," Int"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"1.0"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")])])])],-1),s("div",{class:"language- vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"}),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",null,";  @ float.jl:908 within `Int64`")]),i(`
`),s("span",{class:"line"},[s("span",null,"define i64 @julia_Int64_6478(double %0) #0 {")]),i(`
`),s("span",{class:"line"},[s("span",null,"top:")]),i(`
`),s("span",{class:"line"},[s("span",null,"  %gcframe10 = alloca [6 x {}*], align 16")]),i(`
`),s("span",{class:"line"},[s("span",null,"  %gcframe10.sub = getelementptr inbounds [6 x {}*], [6 x {}*]* %gcframe10, i64 0, i64 0")]),i(`
`),s("span",{class:"line"},[s("span",null,"  %1 = bitcast [6 x {}*]* %gcframe10 to i8*")]),i(`
`),s("span",{class:"line"},[s("span",null,"  call void @llvm.memset.p0i8.i64(i8* align 16 %1, i8 0, i64 48, i1 true)")]),i(`
`),s("span",{class:"line"},[s("span",null,'  %thread_ptr = call i8* asm "movq %fs:0, $0", "=r"() #12')]),i(`
`),s("span",{class:"line"},[s("span",null,"  %tls_ppgcstack = getelementptr i8, i8* %thread_ptr, i64 -8")]),i(`
`),s("span",{class:"line"},[s("span",null,"  %2 = bitcast i8* %tls_ppgcstack to {}****")]),i(`
`),s("span",{class:"line"},[s("span",null,"  %tls_pgcstack = load {}***, {}**** %2, align 8")]),i(`
`),s("span",{class:"line"},[s("span",null,";  @ float.jl:909 within `Int64`")]),i(`
`),s("span",{class:"line"},[s("span",null,"; ┌ @ float.jl:537 within `<=`")]),i(`
`),s("span",{class:"line"},[s("span",null,"   %3 = bitcast [6 x {}*]* %gcframe10 to i64*")]),i(`
`),s("span",{class:"line"},[s("span",null,"   store i64 16, i64* %3, align 16")]),i(`
`),s("span",{class:"line"},[s("span",null,"   %4 = getelementptr inbounds [6 x {}*], [6 x {}*]* %gcframe10, i64 0, i64 1")]),i(`
`),s("span",{class:"line"},[s("span",null,"   %5 = bitcast {}** %4 to {}***")]),i(`
`),s("span",{class:"line"},[s("span",null,"   %6 = load {}**, {}*** %tls_pgcstack, align 8")]),i(`
`),s("span",{class:"line"},[s("span",null,"   store {}** %6, {}*** %5, align 8")]),i(`
`),s("span",{class:"line"},[s("span",null,"   %7 = bitcast {}*** %tls_pgcstack to {}***")]),i(`
`),s("span",{class:"line"},[s("span",null,"   store {}** %gcframe10.sub, {}*** %7, align 8")]),i(`
`),s("span",{class:"line"},[s("span",null,"   %8 = fcmp ult double %0, 0xC3E0000000000000")]),i(`
`),s("span",{class:"line"},[s("span",null,"; └")]),i(`
`),s("span",{class:"line"},[s("span",null,"  %9 = fcmp uge double %0, 0x43E0000000000000")]),i(`
`),s("span",{class:"line"},[s("span",null,"  %10 = or i1 %8, %9")]),i(`
`),s("span",{class:"line"},[s("span",null,"  br i1 %10, label %L16, label %L8")]),i(`
`),s("span",{class:"line"},[s("span")]),i(`
`),s("span",{class:"line"},[s("span",null,"L8:                                               ; preds = %top")]),i(`
`),s("span",{class:"line"},[s("span",null,"; ┌ @ floatfuncs.jl:45 within `isinteger`")]),i(`
`),s("span",{class:"line"},[s("span",null,"; │┌ @ floatfuncs.jl:153 within `trunc`")]),i(`
`),s("span",{class:"line"},[s("span",null,"; ││┌ @ floatfuncs.jl:153 within `#trunc#806`")]),i(`
`),s("span",{class:"line"},[s("span",null,"; │││┌ @ float.jl:393 within `round`")]),i(`
`),s("span",{class:"line"},[s("span",null,"      %11 = call double @llvm.trunc.f64(double %0)")]),i(`
`),s("span",{class:"line"},[s("span",null,"; │└└└")]),i(`
`),s("span",{class:"line"},[s("span",null,"; │┌ @ float.jl:410 within `-`")]),i(`
`),s("span",{class:"line"},[s("span",null,"    %12 = fsub double %0, %11")]),i(`
`),s("span",{class:"line"},[s("span",null,"; │└")]),i(`
`),s("span",{class:"line"},[s("span",null,"; │┌ @ float.jl:572 within `==` @ float.jl:534")]),i(`
`),s("span",{class:"line"},[s("span",null,"    %13 = fcmp une double %12, 0.000000e+00")]),i(`
`),s("span",{class:"line"},[s("span",null,"; └└")]),i(`
`),s("span",{class:"line"},[s("span",null,"  br i1 %13, label %L16, label %L14")]),i(`
`),s("span",{class:"line"},[s("span")]),i(`
`),s("span",{class:"line"},[s("span",null,"L14:                                              ; preds = %L8")]),i(`
`),s("span",{class:"line"},[s("span",null,";  @ float.jl:910 within `Int64`")]),i(`
`),s("span",{class:"line"},[s("span",null,"; ┌ @ float.jl:336 within `unsafe_trunc`")]),i(`
`),s("span",{class:"line"},[s("span",null,"   %14 = fptosi double %0 to i64")]),i(`
`),s("span",{class:"line"},[s("span",null,"   %15 = freeze i64 %14")]),i(`
`),s("span",{class:"line"},[s("span",null,"   %16 = load {}*, {}** %4, align 8")]),i(`
`),s("span",{class:"line"},[s("span",null,"   %17 = bitcast {}*** %tls_pgcstack to {}**")]),i(`
`),s("span",{class:"line"},[s("span",null,"   store {}* %16, {}** %17, align 8")]),i(`
`),s("span",{class:"line"},[s("span",null,"; └")]),i(`
`),s("span",{class:"line"},[s("span",null,"  ret i64 %15")]),i(`
`),s("span",{class:"line"},[s("span")]),i(`
`),s("span",{class:"line"},[s("span",null,"L16:                                              ; preds = %L8, %top")]),i(`
`),s("span",{class:"line"},[s("span",null,"  %18 = getelementptr inbounds [6 x {}*], [6 x {}*]* %gcframe10, i64 0, i64 2")]),i(`
`),s("span",{class:"line"},[s("span",null,"  %19 = bitcast {}** %18 to [3 x {}*]*")]),i(`
`),s("span",{class:"line"},[s("span",null,";  @ float.jl:912 within `Int64`")]),i(`
`),s("span",{class:"line"},[s("span",null,"  %ptls_field11 = getelementptr inbounds {}**, {}*** %tls_pgcstack, i64 2")]),i(`
`),s("span",{class:"line"},[s("span",null,"  %20 = bitcast {}*** %ptls_field11 to i8**")]),i(`
`),s("span",{class:"line"},[s("span",null,"  %ptls_load1213 = load i8*, i8** %20, align 8")]),i(`
`),s("span",{class:"line"},[s("span",null,"  %box = call noalias nonnull dereferenceable(16) {}* @ijl_gc_pool_alloc(i8* %ptls_load1213, i32 752, i32 16) #9")]),i(`
`),s("span",{class:"line"},[s("span",null,"  %21 = bitcast {}* %box to i64*")]),i(`
`),s("span",{class:"line"},[s("span",null,"  %22 = getelementptr inbounds i64, i64* %21, i64 -1")]),i(`
`),s("span",{class:"line"},[s("span",null,"  store atomic i64 134696202940672, i64* %22 unordered, align 8")]),i(`
`),s("span",{class:"line"},[s("span",null,"  %23 = bitcast {}* %box to double*")]),i(`
`),s("span",{class:"line"},[s("span",null,"  store double %0, double* %23, align 8")]),i(`
`),s("span",{class:"line"},[s("span",null,"  %24 = getelementptr inbounds [6 x {}*], [6 x {}*]* %gcframe10, i64 0, i64 5")]),i(`
`),s("span",{class:"line"},[s("span",null,"  store {}* %box, {}** %24, align 8")]),i(`
`),s("span",{class:"line"},[s("span",null,"  call void @j_InexactError_6480([3 x {}*]* noalias nocapture noundef nonnull sret([3 x {}*]) %19, {}* inttoptr (i64 134696361657792 to {}*), {}* readonly inttoptr (i64 134696202941472 to {}*), {}* nonnull readonly %box)")]),i(`
`),s("span",{class:"line"},[s("span",null,"  %ptls_load81415 = load i8*, i8** %20, align 8")]),i(`
`),s("span",{class:"line"},[s("span",null,"  %box3 = call noalias nonnull dereferenceable(32) {}* @ijl_gc_pool_alloc(i8* %ptls_load81415, i32 800, i32 32) #9")]),i(`
`),s("span",{class:"line"},[s("span",null,"  %25 = bitcast {}* %box3 to i64*")]),i(`
`),s("span",{class:"line"},[s("span",null,"  %26 = getelementptr inbounds i64, i64* %25, i64 -1")]),i(`
`),s("span",{class:"line"},[s("span",null,"  store atomic i64 134696172004720, i64* %26 unordered, align 8")]),i(`
`),s("span",{class:"line"},[s("span",null,"  %27 = bitcast {}* %box3 to i8*")]),i(`
`),s("span",{class:"line"},[s("span",null,"  %28 = bitcast {}** %18 to i8*")]),i(`
`),s("span",{class:"line"},[s("span",null,"  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %27, i8* noundef nonnull align 16 dereferenceable(24) %28, i64 24, i1 false)")]),i(`
`),s("span",{class:"line"},[s("span",null,"  call void @ijl_throw({}* %box3)")]),i(`
`),s("span",{class:"line"},[s("span",null,"  unreachable")]),i(`
`),s("span",{class:"line"},[s("span",null,"}")])])])],-1)])),_:1,__:[1]})]),_:1})])}const b=h(o,[["render",c]]);export{f as __pageData,b as default};
