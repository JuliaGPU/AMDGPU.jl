import{_ as i,c as a,o as e,aj as t}from"./chunks/framework.ZMpVshv0.js";const d=JSON.parse('{"title":"Hostcall","description":"","frontmatter":{},"headers":[],"relativePath":"api/hostcall.md","filePath":"api/hostcall.md","lastUpdated":null}'),n={name:"api/hostcall.md"};function l(h,s,o,p,r,k){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="Hostcall" tabindex="-1">Hostcall <a class="header-anchor" href="#Hostcall" aria-label="Permalink to &quot;Hostcall {#Hostcall}&quot;">​</a></h1><p>Hostcalls provide a means for GPU-CPU communications within running kernels.</p><p>AMDGPU.jl provides its own implementation of hostcalls, relying on HSA signals. Currently, hostcalls are used for device-side allocations, printing and exception reporting.</p><p>Some of the hostcalls (global hostcalls), are launched automatically, if their usage is detected during compilation (e.g. device-side allocations, exception reporting).</p><p>Hostcalls require careful usage, since they each spawn their own Tasks. There should be no blocking operations during this time.</p><p>For example, using non-blocking synchronization instead of blocking with <code>AMDGPU.synchronize(; blocking=false)</code> (which is also the default).</p><p>To stop hostcalls after synchronization, provide <code>stop_hostcalls=true</code> keyword argument, otherwise the performance might degrade because of constant pooling of HSA signals in a loop.</p><h2 id="Example" tabindex="-1">Example <a class="header-anchor" href="#Example" aria-label="Permalink to &quot;Example {#Example}&quot;">​</a></h2><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Device</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HostCallHolder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Float32, Tuple{Float32}) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42f0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kernel!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y, hc)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Device</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hostcall!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hc, y[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ROCArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Float32[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@roc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> kernel!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y, hc)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">synchronize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; stop_hostcalls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Stop hostcall.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Device</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">free!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hc) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Free hostcall buffers.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@assert</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">≈</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42f0</span></span></code></pre></div><p>In this example, <code>HostCallHolder</code> is used to create and launch <code>HostCall</code>. <code>HostCallHolder</code> contains the <code>HostCall</code> structure itself that is passed to kernel, a task that is spawned on creation and some additional info for controlling the lifetime of the task.</p><p>First argument is a function we want to execute when we call the hostcall. In this case we add <code>42f0</code> to input argument <code>x</code> and return the result.</p><p>Second and third arguments are the return type <code>Float32</code> and the tuple of types of input arguments <code>Tuple{Float32}</code>.</p><p><code>hostcall!</code> is used to execute the function on the host, wait on the result, and obtain the return values. At the moment, it is performed once per workgroup.</p><h2 id="Continuous-Host-Call" tabindex="-1">Continuous Host-Call <a class="header-anchor" href="#Continuous-Host-Call" aria-label="Permalink to &quot;Continuous Host-Call {#Continuous-Host-Call}&quot;">​</a></h2><p>By default, hostcalls can be used only once. After executing the function on the host, the task finishes and exits.</p><p>However, if you need your hostcall to live indefinitely, pass <code>continuous=true</code> keyword argument to <code>HostCallHolder(...; continuous=true)</code>.</p><p>To then stop the hostcall, call <code>Device.non_continuous!(hc)</code> or <code>Device.finish!(hc)</code> on the <code>HostCallHolder</code>.</p><p>The difference between them is that <code>non_continuous!</code> will allow calling hostcall one more time before exiting, while <code>finish!</code> will exit immediately.</p><p><code>finish!</code> can be used on any <code>HostCallHolder</code> to force-exit the running hostcall task.</p><h2 id="Free-hostcall-buffers" tabindex="-1">Free hostcall buffers <a class="header-anchor" href="#Free-hostcall-buffers" aria-label="Permalink to &quot;Free hostcall buffers {#Free-hostcall-buffers}&quot;">​</a></h2><p>For custom hostcalls it is important to call <code>AMDGPU.Device.free!</code> once kernel has finished to free buffers that hostcall used in the process.</p>`,21)]))}const u=i(n,[["render",l]]);export{d as __pageData,u as default};
