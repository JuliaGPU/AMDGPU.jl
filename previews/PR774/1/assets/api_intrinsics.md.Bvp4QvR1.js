import{_ as o,C as r,c as p,o as d,j as s,a as n,aj as a,G as t,w as l}from"./chunks/framework.D9MmKVLp.js";const G=JSON.parse('{"title":"Intrinsics","description":"","frontmatter":{},"headers":[],"relativePath":"api/intrinsics.md","filePath":"api/intrinsics.md","lastUpdated":null}'),k={name:"api/intrinsics.md"},u={class:"jldocstring custom-block",open:""},h={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""};function j(A,i,P,F,T,x){const e=r("Badge");return d(),p("div",null,[i[48]||(i[48]=s("h1",{id:"Intrinsics",tabindex:"-1"},[n("Intrinsics "),s("a",{class:"header-anchor",href:"#Intrinsics","aria-label":'Permalink to "Intrinsics {#Intrinsics}"'},"​")],-1)),i[49]||(i[49]=s("p",null,"API Reference",-1)),i[50]||(i[50]=s("h2",{id:"Indexing",tabindex:"-1"},[n("Indexing "),s("a",{class:"header-anchor",href:"#Indexing","aria-label":'Permalink to "Indexing {#Indexing}"'},"​")],-1)),s("details",u,[s("summary",null,[i[0]||(i[0]=s("a",{id:"AMDGPU.Device.workitemIdx",href:"#AMDGPU.Device.workitemIdx"},[s("span",{class:"jlbinding"},"AMDGPU.Device.workitemIdx")],-1)),i[1]||(i[1]=n()),t(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[3]||(i[3]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">workitemIdx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ROCDim3</span></span></code></pre></div><p>Returns the work item index within the work group. See also: <a href="/previews/PR774/api/intrinsics#AMDGPU.Device.threadIdx"><code>threadIdx</code></a></p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[2]||(i[2]=[s("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v1.3.2/src/device/gcn/indexing.jl#L116-L121",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})]),s("details",h,[s("summary",null,[i[4]||(i[4]=s("a",{id:"AMDGPU.Device.workgroupIdx",href:"#AMDGPU.Device.workgroupIdx"},[s("span",{class:"jlbinding"},"AMDGPU.Device.workgroupIdx")],-1)),i[5]||(i[5]=n()),t(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[7]||(i[7]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">workgroupIdx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ROCDim3</span></span></code></pre></div><p>Returns the work group index. See also: <a href="/previews/PR774/api/intrinsics#AMDGPU.Device.blockIdx"><code>blockIdx</code></a></p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[6]||(i[6]=[s("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v1.3.2/src/device/gcn/indexing.jl#L124-L129",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[6]})]),s("details",c,[s("summary",null,[i[8]||(i[8]=s("a",{id:"AMDGPU.Device.workgroupDim",href:"#AMDGPU.Device.workgroupDim"},[s("span",{class:"jlbinding"},"AMDGPU.Device.workgroupDim")],-1)),i[9]||(i[9]=n()),t(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[11]||(i[11]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">workgroupDim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ROCDim3</span></span></code></pre></div><p>Returns the size of each workgroup in workitems. See also: <a href="/previews/PR774/api/intrinsics#AMDGPU.Device.blockDim"><code>blockDim</code></a></p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[10]||(i[10]=[s("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v1.3.2/src/device/gcn/indexing.jl#L132-L137",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[10]})]),s("details",g,[s("summary",null,[i[12]||(i[12]=s("a",{id:"AMDGPU.Device.gridItemDim",href:"#AMDGPU.Device.gridItemDim"},[s("span",{class:"jlbinding"},"AMDGPU.Device.gridItemDim")],-1)),i[13]||(i[13]=n()),t(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[15]||(i[15]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gridItemDim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ROCDim3</span></span></code></pre></div><p>Returns the size of the grid in workitems. This behaviour is different from CUDA where <code>gridDim</code> gives the size of the grid in blocks.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[14]||(i[14]=[s("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v1.3.2/src/device/gcn/indexing.jl#L140-L145",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[14]})]),s("details",b,[s("summary",null,[i[16]||(i[16]=s("a",{id:"AMDGPU.Device.gridGroupDim",href:"#AMDGPU.Device.gridGroupDim"},[s("span",{class:"jlbinding"},"AMDGPU.Device.gridGroupDim")],-1)),i[17]||(i[17]=n()),t(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[19]||(i[19]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gridGroupDim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ROCDim3</span></span></code></pre></div><p>Returns the size of the grid in workgroups. This is equivalent to CUDA&#39;s <code>gridDim</code>.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[18]||(i[18]=[s("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v1.3.2/src/device/gcn/indexing.jl#L148-L153",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[18]})]),i[51]||(i[51]=s("p",null,"Use these functions for compatibility with CUDA.jl.",-1)),s("details",y,[s("summary",null,[i[20]||(i[20]=s("a",{id:"AMDGPU.Device.threadIdx",href:"#AMDGPU.Device.threadIdx"},[s("span",{class:"jlbinding"},"AMDGPU.Device.threadIdx")],-1)),i[21]||(i[21]=n()),t(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[23]||(i[23]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">threadIdx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ROCDim3</span></span></code></pre></div><p>Returns the thread index within the block. See also: <a href="/previews/PR774/api/intrinsics#AMDGPU.Device.workitemIdx"><code>workitemIdx</code></a></p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[22]||(i[22]=[s("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v1.3.2/src/device/gcn/indexing.jl#L158-L163",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[22]})]),s("details",D,[s("summary",null,[i[24]||(i[24]=s("a",{id:"AMDGPU.Device.blockIdx",href:"#AMDGPU.Device.blockIdx"},[s("span",{class:"jlbinding"},"AMDGPU.Device.blockIdx")],-1)),i[25]||(i[25]=n()),t(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[27]||(i[27]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">blockIdx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ROCDim3</span></span></code></pre></div><p>Returns the block index within the grid. See also: <a href="/previews/PR774/api/intrinsics#AMDGPU.Device.workgroupIdx"><code>workgroupIdx</code></a></p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[26]||(i[26]=[s("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v1.3.2/src/device/gcn/indexing.jl#L166-L171",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[26]})]),s("details",_,[s("summary",null,[i[28]||(i[28]=s("a",{id:"AMDGPU.Device.blockDim",href:"#AMDGPU.Device.blockDim"},[s("span",{class:"jlbinding"},"AMDGPU.Device.blockDim")],-1)),i[29]||(i[29]=n()),t(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[31]||(i[31]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">blockDim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ROCDim3</span></span></code></pre></div><p>Returns the dimensions of the block. See also: <a href="/previews/PR774/api/intrinsics#AMDGPU.Device.workgroupDim"><code>workgroupDim</code></a></p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[30]||(i[30]=[s("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v1.3.2/src/device/gcn/indexing.jl#L174-L179",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[30]})]),i[52]||(i[52]=s("h2",{id:"Synchronization",tabindex:"-1"},[n("Synchronization "),s("a",{class:"header-anchor",href:"#Synchronization","aria-label":'Permalink to "Synchronization {#Synchronization}"'},"​")],-1)),s("details",v,[s("summary",null,[i[32]||(i[32]=s("a",{id:"AMDGPU.Device.sync_workgroup",href:"#AMDGPU.Device.sync_workgroup"},[s("span",{class:"jlbinding"},"AMDGPU.Device.sync_workgroup")],-1)),i[33]||(i[33]=n()),t(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[35]||(i[35]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sync_workgroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Waits until all wavefronts in a workgroup have reached this call.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[34]||(i[34]=[s("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v1.3.2/src/device/gcn/synchronization.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[34]})]),s("details",m,[s("summary",null,[i[36]||(i[36]=s("a",{id:"AMDGPU.Device.sync_workgroup_count",href:"#AMDGPU.Device.sync_workgroup_count"},[s("span",{class:"jlbinding"},"AMDGPU.Device.sync_workgroup_count")],-1)),i[37]||(i[37]=n()),t(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[39]||(i[39]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sync_workgroup_count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(predicate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Cint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Cint</span></span></code></pre></div><p>Identical to <code>sync_workgroup</code>, with the additional feature that it evaluates the predicate for all workitems in the workgroup and returns the number of workitems for which predicate evaluates to non-zero.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[38]||(i[38]=[s("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v1.3.2/src/device/gcn/synchronization.jl#L9-L15",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[38]})]),s("details",C,[s("summary",null,[i[40]||(i[40]=s("a",{id:"AMDGPU.Device.sync_workgroup_and",href:"#AMDGPU.Device.sync_workgroup_and"},[s("span",{class:"jlbinding"},"AMDGPU.Device.sync_workgroup_and")],-1)),i[41]||(i[41]=n()),t(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[43]||(i[43]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sync_workgroup_and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(predicate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Cint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Cint</span></span></code></pre></div><p>Identical to <code>sync_workgroup</code>, with the additional feature that it evaluates the predicate for all workitems in the workgroup and returns non-zero if and only if predicate evaluates to non-zero for all of them.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[42]||(i[42]=[s("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v1.3.2/src/device/gcn/synchronization.jl#L22-L28",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[42]})]),s("details",f,[s("summary",null,[i[44]||(i[44]=s("a",{id:"AMDGPU.Device.sync_workgroup_or",href:"#AMDGPU.Device.sync_workgroup_or"},[s("span",{class:"jlbinding"},"AMDGPU.Device.sync_workgroup_or")],-1)),i[45]||(i[45]=n()),t(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[47]||(i[47]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sync_workgroup_or</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(predicate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Cint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Cint</span></span></code></pre></div><p>Identical to <code>sync_workgroup</code>, with the additional feature that it evaluates the predicate for all workitems in the workgroup and returns non-zero if and only if predicate evaluates to non-zero for any of them.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[46]||(i[46]=[s("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v1.3.2/src/device/gcn/synchronization.jl#L35-L41",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[46]})])])}const U=o(k,[["render",j]]);export{G as __pageData,U as default};
