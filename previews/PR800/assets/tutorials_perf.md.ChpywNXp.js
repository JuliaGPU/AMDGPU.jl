import{_ as i,c as a,o as e,aj as n}from"./chunks/framework.CnxOE_Mj.js";const c=JSON.parse('{"title":"Performance Tips","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/perf.md","filePath":"tutorials/perf.md","lastUpdated":null}'),t={name:"tutorials/perf.md"};function l(h,s,p,r,k,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="Performance-Tips" tabindex="-1">Performance Tips <a class="header-anchor" href="#Performance-Tips" aria-label="Permalink to &quot;Performance Tips {#Performance-Tips}&quot;">​</a></h1><h2 id="Use-Caching-Memory-Allocator" tabindex="-1">Use Caching Memory Allocator <a class="header-anchor" href="#Use-Caching-Memory-Allocator" aria-label="Permalink to &quot;Use Caching Memory Allocator {#Use-Caching-Memory-Allocator}&quot;">​</a></h2><p>Julia relies on Garbage-Collection (GC) for memory management, because of that it will not free <code>ROCArrays</code> immediately as they are no longer used.</p><p>In tight loops with lots of GPU allocations this will put a lot of pressure on the allocator and may interfere with other programs that use that GPU.</p><p>Using <a href="https://juliagpu.github.io/GPUArrays.jl/dev/interface/#Caching-Allocator" target="_blank" rel="noreferrer">caching allocator</a> gives users a precise control of GPU memory, even if the allocations happen in code that&#39;s not controlled by the user.</p><p>You should use <code>GPUArrays.@cached</code> around parts of the code with repeating memory allocation patterns, for example, on the training loops.</p><p>Example below requires <code>8 MiB</code> of VRAM per iteration. In the worst case (if GC does not kick in) it would quickly fill up to <code>8 GiB</code> of VRAM, but with caching allocator it uses exactly <code>8 MiB</code>, which you can then immediately free to reclaim the memory.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cache </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GPUArrays</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AllocCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AllocCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n_free</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n_busy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sizeof</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytes)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           GPUArrays</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@cached</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cache </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">begin</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               sin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.(AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Float32, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cache</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AllocCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n_free</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n_busy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sizeof</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8.000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MiB)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GPUArrays</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">unsafe_free!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cache)</span></span></code></pre></div><p>For a more sophisticated real-world example, see how <a href="https://github.com/JuliaNeuralGraphics/GaussianSplatting.jl/blob/e4ef1324c187371e336bef875b053023afe7fb2c/src/training.jl#L183" target="_blank" rel="noreferrer">GaussianSplatting.jl</a> handles it.</p>`,9)]))}const g=i(t,[["render",l]]);export{c as __pageData,g as default};
