import{_ as r,C as h,c as p,o,aj as t,j as i,G as e,a as l,w as n}from"./chunks/framework.C5K8_nmr.js";const v=JSON.parse('{"title":"Streams","description":"","frontmatter":{},"headers":[],"relativePath":"api/streams.md","filePath":"api/streams.md","lastUpdated":null}'),k={name:"api/streams.md"},d={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""};function b(C,s,_,A,F,f){const a=h("Badge");return o(),p("div",null,[s[34]||(s[34]=t(`<h1 id="Streams" tabindex="-1">Streams <a class="header-anchor" href="#Streams" aria-label="Permalink to &quot;Streams {#Streams}&quot;">â€‹</a></h1><p>Similar to CUDA streams, ROCm has HIP streams, which are buffers used to instruct the GPU hardware which kernels to launch. HIP streams are synchronous, like CUDA streams.</p><p>Each device has a default stream associated, which is accessible with <code>AMDGPU.stream()</code>.</p><p>There are several ways to specify which stream to launch a kernel on:</p><ul><li>Using <a href="/v2/api/streams#AMDGPU.stream!"><code>AMDGPU.stream!</code></a> to change default stream to be used <strong>within the same Julia task</strong>.</li></ul><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stream </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HIPStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stream!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stream) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Change default stream to be used for subsequent operations.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Float32, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Will be executed on \`stream\`.</span></span></code></pre></div><ul><li>Using <a href="/v2/api/streams#AMDGPU.stream!"><code>AMDGPU.stream!</code></a> to execute given function and reset to the original stream after completion:</li></ul><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stream </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HIPStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stream!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Float32, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), stream)</span></span></code></pre></div><ul><li>Using <code>stream</code> argument to <code>@roc</code> macro:</li></ul><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stream </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HIPStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@roc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stream </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">kernel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Streams also have an inherent priority, which allows control of kernel submission latency and on-device scheduling preference with respect to kernels submitted on other streams. There are three priorities: normal (the default), low, and high priority.</p><p>Priority of the default <code>stream</code> can be set with <a href="/v2/api/streams#AMDGPU.priority!"><code>AMDGPU.priority!</code></a>. Alternatively, it can be set at stream creation time:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">low_prio </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HIPStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:low</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">high_prio </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HIPStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:high</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">normal_prio </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HIPStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:normal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or just omit &quot;priority&quot;</span></span></code></pre></div>`,13)),i("details",d,[i("summary",null,[s[0]||(s[0]=i("a",{id:"AMDGPU.stream",href:"#AMDGPU.stream"},[i("span",{class:"jlbinding"},"AMDGPU.stream")],-1)),s[1]||(s[1]=l()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[3]||(s[3]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HIPStream</span></span></code></pre></div><p>Get the HIP stream that should be used as the default one for the currently executing task.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>s[2]||(s[2]=[i("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v2.0.1/src/tls.jl#L80-L85",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})]),i("details",c,[i("summary",null,[s[4]||(s[4]=i("a",{id:"AMDGPU.stream!",href:"#AMDGPU.stream!"},[i("span",{class:"jlbinding"},"AMDGPU.stream!")],-1)),s[5]||(s[5]=l()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[8]||(s[8]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stream!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HIPStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Change the default stream to be used <strong>within the same Julia task</strong>.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>s[6]||(s[6]=[i("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v2.0.1/src/tls.jl#L88-L92",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[6]}),s[9]||(s[9]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stream!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Base.Callable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, stream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HIPStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Change the default stream to be used <strong>within the same Julia task</strong>, execute <code>f</code> and revert to the original stream.</p><p><strong>Returns:</strong></p><p>Return value of the function <code>f</code>.</p>',4)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>s[7]||(s[7]=[i("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v2.0.1/src/tls.jl#L99-L108",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[7]})]),i("details",g,[i("summary",null,[s[10]||(s[10]=i("a",{id:"AMDGPU.priority!",href:"#AMDGPU.priority!"},[i("span",{class:"jlbinding"},"AMDGPU.priority!")],-1)),s[11]||(s[11]=l()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[14]||(s[14]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">priority!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Change the priority of the default stream. Accepted values are <code>:normal</code> (the default), <code>:low</code> and <code>:high</code>.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>s[12]||(s[12]=[i("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v2.0.1/src/tls.jl#L152-L157",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[12]}),s[15]||(s[15]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">priority!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Base.Callable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, priority</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Chnage the priority of default stream, execute <code>f</code> and revert to the original priority. Accepted values are <code>:normal</code> (the default), <code>:low</code> and <code>:high</code>.</p><p><strong>Returns:</strong></p><p>Return value of the function <code>f</code>.</p>',4)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>s[13]||(s[13]=[i("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v2.0.1/src/tls.jl#L166-L176",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[13]})]),i("details",u,[i("summary",null,[s[16]||(s[16]=i("a",{id:"AMDGPU.HIP.HIPStream",href:"#AMDGPU.HIP.HIPStream"},[i("span",{class:"jlbinding"},"AMDGPU.HIP.HIPStream")],-1)),s[17]||(s[17]=l()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[20]||(s[20]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HIPStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(priority</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :normal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Arguments:</strong></p><ul><li><code>priority::Symbol</code>: Priority of the stream: <code>:normal</code>, <code>:high</code> or <code>:low</code>.</li></ul><p>Create HIPStream with given priority. Device is the default device that&#39;s currently in use.</p>',4)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>s[18]||(s[18]=[i("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v2.0.1/src/hip/stream.jl#L13-L22",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[18]}),s[21]||(s[21]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HIPStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hipStream_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Create HIPStream from <code>hipStream_t</code> handle. Device is the default device that&#39;s currently in use.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>s[19]||(s[19]=[i("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v2.0.1/src/hip/stream.jl#L42-L47",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[19]})]),s[35]||(s[35]=t(`<h2 id="Synchronization" tabindex="-1">Synchronization <a class="header-anchor" href="#Synchronization" aria-label="Permalink to &quot;Synchronization {#Synchronization}&quot;">â€‹</a></h2><p>AMDGPU.jl by default uses non-blocking stream synchronization with <a href="/v2/api/streams#AMDGPU.synchronize"><code>AMDGPU.synchronize</code></a> to work correctly with TLS and <a href="/v2/api/hostcall#Hostcall">Hostcall</a>.</p><p>Users, however, can switch to a blocking synchronization globally with <code>nonblocking_synchronization</code> <a href="https://github.com/JuliaPackaging/Preferences.jl" target="_blank" rel="noreferrer">preference</a> or with fine-grained <code>AMDGPU.synchronize(; blocking=true)</code>. Blocking synchronization might offer slightly lower latency.</p><p>You can also perform synchronization of the expression with <a href="/v2/api/streams#AMDGPU.@sync"><code>AMDGPU.@sync</code></a> macro, which will execute given expression and synchronize afterwards (using <a href="/v2/api/streams#AMDGPU.synchronize"><code>AMDGPU.synchronize</code></a> under the hood).</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@sync</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> begin</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    @roc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Finally, you can perform full device synchronization with <a href="/v2/api/streams#AMDGPU.HIP.device_synchronize"><code>AMDGPU.device_synchronize</code></a>.</p>`,6)),i("details",y,[i("summary",null,[s[22]||(s[22]=i("a",{id:"AMDGPU.synchronize",href:"#AMDGPU.synchronize"},[i("span",{class:"jlbinding"},"AMDGPU.synchronize")],-1)),s[23]||(s[23]=l()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[25]||(s[25]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">synchronize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HIPStream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); blocking</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Wait until all kernels executing on <code>stream</code> have completed.</p><p>If there are running HostCalls, then <code>blocking</code> <strong>must</strong> be <code>false</code>. Additionally, if you want to stop host calls afterwards, then provide <code>stop_hostcalls=true</code> keyword argument.</p>',3)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>s[24]||(s[24]=[i("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v2.0.1/src/highlevel.jl#L27-L35",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[24]})]),i("details",E,[i("summary",null,[s[26]||(s[26]=i("a",{id:"AMDGPU.@sync",href:"#AMDGPU.@sync"},[i("span",{class:"jlbinding"},"AMDGPU.@sync")],-1)),s[27]||(s[27]=l()),e(a,{type:"info",class:"jlObjectType jlMacro",text:"Macro"})]),s[29]||(s[29]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@sync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ex</span></span></code></pre></div><p>Run expression <code>ex</code> on currently active stream and synchronize the GPU on that stream afterwards.</p><p>See also: <a href="/v2/api/streams#AMDGPU.synchronize"><code>synchronize</code></a>.</p>',3)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>s[28]||(s[28]=[i("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v2.0.1/src/highlevel.jl#L67-L74",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[28]})]),i("details",m,[i("summary",null,[s[30]||(s[30]=i("a",{id:"AMDGPU.HIP.device_synchronize",href:"#AMDGPU.HIP.device_synchronize"},[i("span",{class:"jlbinding"},"AMDGPU.HIP.device_synchronize")],-1)),s[31]||(s[31]=l()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[33]||(s[33]=i("p",null,"Blocks until all kernels on all streams have completed. Uses currently active device.",-1)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>s[32]||(s[32]=[i("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v2.0.1/src/hip/HIP.jl#L83-L86",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[32]})])])}const D=r(k,[["render",b]]);export{v as __pageData,D as default};
