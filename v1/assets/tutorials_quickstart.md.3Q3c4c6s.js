import{_ as s,c as a,o as t,aj as e}from"./chunks/framework.kjMzaIT4.js";const c=JSON.parse('{"title":"Quick Start","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/quickstart.md","filePath":"tutorials/quickstart.md","lastUpdated":null}'),n={name:"tutorials/quickstart.md"};function l(h,i,p,k,r,d){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="Quick-Start" tabindex="-1">Quick Start <a class="header-anchor" href="#Quick-Start" aria-label="Permalink to &quot;Quick Start {#Quick-Start}&quot;">​</a></h1><h2 id="Element-wise-addition-via-array-interface" tabindex="-1">Element-wise addition via array interface <a class="header-anchor" href="#Element-wise-addition-via-array-interface" aria-label="Permalink to &quot;Element-wise addition via array interface {#Element-wise-addition-via-array-interface}&quot;">​</a></h2><p>As a simple example, let&#39;s add two vectors both on CPU and GPU and make sure that the results are the same:</p><p>First, we do this on CPU:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span></code></pre></div><p>To do the same computation on the GPU, we first need to copy the host arrays to the device and then simply add them together element-wise:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a_d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ROCArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b_d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ROCArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c_d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a_d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b_d;</span></span></code></pre></div><p>Now, let&#39;s check that the results are the same on CPU and GPU by transferring GPU array back to host and comparing the results:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c_d) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">≈</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><h2 id="Element-wise-addition-via-kernel" tabindex="-1">Element-wise addition via kernel <a class="header-anchor" href="#Element-wise-addition-via-kernel" aria-label="Permalink to &quot;Element-wise addition via kernel {#Element-wise-addition-via-kernel}&quot;">​</a></h2><p>Alternatively, we can perform the same computation by writing our custom GPU kernel:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vadd!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c, a, b)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> workitemIdx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">workgroupIdx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> workgroupDim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           c[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b[i]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           return</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vadd! (generic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> with </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> method)</span></span></code></pre></div><p>The index <code>i</code> of a single workitem can be uniquely identified by its grid index. In this case only one dimension is used, so we take only <code>.x</code> coordinate into account.</p><p>A kernel is compiled upon its first launch. Subsequent launches re-use it, without recompilation. Let&#39;s launch a kernel, but first clear-out the memory of the resulting vector <code>cd</code>.</p><div class="tip custom-block"><p class="custom-block-title">Kernels should return nothing</p><p>Notice how we explicitly specify that this function does not return a value by adding the <code>return</code> statement. This is necessary for all GPU kernels and we can enforce it by adding a <code>return</code>, <code>return nothing</code>, or even <code>nothing</code> at the end of the kernel. If this statement is omitted, Julia will attempt to return the value of the last evaluated expression, in this case a <code>Float64</code>, which will cause a compilation failure as kernels cannot return values.</p></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fill!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c_d, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> groupsize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gridsize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n, groupsize);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @roc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> groupsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">groupsize gridsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gridsize </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vadd!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c_d, a_d, b_d);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c_d) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">≈</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><p>The easiest way to launch a GPU kernel is with the <code>@roc</code> macro, specifying <code>groupsize</code> and <code>gridsize</code> to cover full array, and calling it like a regular function.</p><div class="tip custom-block"><p class="custom-block-title">Asynchronous kernels</p><p>Keep in mind that kernel launches are asynchronous, meaning that you need to synchronize before you can use the result (e.g. with <a href="/v1/api/streams#AMDGPU.synchronize"><code>AMDGPU.synchronize</code></a>). However, GPU &lt;-&gt; CPU transfers synchronize implicitly.</p></div><p>The grid is the domain over which the <em>entire</em> kernel executes over. The grid will be split into multiple workgroups by hardware automatically, and the kernel does not complete until all workgroups complete.</p><p>AMDGPU has the concept of &quot;workitems&quot;, &quot;workgroups&quot;, and the &quot;grid&quot;. A workitem is a single thread of execution, capable of performing arithmentic operations. Workitems are grouped into &quot;wavefronts&quot; (&quot;warps&quot; in CUDA) which share the same compute unit, and execute the same instructions simulatenously.</p><p>The workgroup is a logical unit of compute supported by hardware which comprises multiple wavefronts, which shares resources (specifically local memory) and can be efficiently synchronized. A workgroup may be executed by one or multiple hardware compute units.</p><h2 id="Naming-conventions" tabindex="-1">Naming conventions <a class="header-anchor" href="#Naming-conventions" aria-label="Permalink to &quot;Naming conventions {#Naming-conventions}&quot;">​</a></h2><p>Throughout this example we use terms like &quot;work group&quot; and &quot;work item&quot;. These terms are used by the Khronos consortium and their APIs including OpenCL and Vulkan, as well as the HSA foundation.</p><p>NVIDIA, on the other hand, uses some different terms in their CUDA API. As a quick summary, here is a mapping of the most common terms:</p><table tabindex="0"><thead><tr><th style="text-align:center;">AMDGPU</th><th style="text-align:center;">CUDA</th></tr></thead><tbody><tr><td style="text-align:center;"><a href="/v1/api/intrinsics#AMDGPU.Device.workitemIdx"><code>workitemIdx</code></a></td><td style="text-align:center;"><code>threadIdx</code></td></tr><tr><td style="text-align:center;"><a href="/v1/api/intrinsics#AMDGPU.Device.workgroupIdx"><code>workgroupIdx</code></a></td><td style="text-align:center;"><code>blockIdx</code></td></tr><tr><td style="text-align:center;"><a href="/v1/api/intrinsics#AMDGPU.Device.workgroupDim"><code>workgroupDim</code></a></td><td style="text-align:center;"><code>blockDim</code></td></tr><tr><td style="text-align:center;"><a href="/v1/api/intrinsics#AMDGPU.Device.gridItemDim"><code>gridItemDim</code></a></td><td style="text-align:center;">No equivalent</td></tr><tr><td style="text-align:center;"><a href="/v1/api/intrinsics#AMDGPU.Device.gridGroupDim"><code>gridGroupDim</code></a></td><td style="text-align:center;"><code>gridDim</code></td></tr><tr><td style="text-align:center;"><code>groupsize</code></td><td style="text-align:center;"><code>threads</code></td></tr><tr><td style="text-align:center;"><code>gridsize</code></td><td style="text-align:center;"><code>blocks</code></td></tr><tr><td style="text-align:center;"><code>stream</code></td><td style="text-align:center;"><code>stream</code></td></tr></tbody></table>`,25)]))}const E=s(n,[["render",l]]);export{c as __pageData,E as default};
