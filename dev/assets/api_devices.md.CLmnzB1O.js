import{_ as d,C as p,c as h,o as r,aj as t,j as s,G as a,a as l,w as n}from"./chunks/framework.BGJuIMI_.js";const T=JSON.parse('{"title":"Devices","description":"","frontmatter":{},"headers":[],"relativePath":"api/devices.md","filePath":"api/devices.md","lastUpdated":null}'),o={name:"api/devices.md"},k={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""};function A(D,i,f,C,F,j){const e=p("Badge");return r(),h("div",null,[i[42]||(i[42]=t(`<h1 id="Devices" tabindex="-1">Devices <a class="header-anchor" href="#Devices" aria-label="Permalink to &quot;Devices {#Devices}&quot;">â€‹</a></h1><p>In AMDGPU, all GPU devices are auto-detected by the runtime, if they&#39;re supported.</p><p>AMDGPU maintains a global default device. The default device is relevant for all kernel and GPUArray operations. If one is not specified via <code>@roc</code> or an equivalent interface, then the default device is used for those operations, which affects compilation and kernel launch.</p><p>The device bound to a current Julia task is accessible via <a href="/dev/api/devices#AMDGPU.device"><code>AMDGPU.device</code></a> method. The list of available devices can be queried with <a href="/dev/api/devices#AMDGPU.HIP.devices"><code>AMDGPU.devices</code></a> method.</p><p>If you have a <code>HIPDevice</code> object, you can also switch the device with <a href="/dev/api/devices#AMDGPU.device!"><code>AMDGPU.device!</code></a>. This will switch it <strong>only within the task it is called from</strong>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xd1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Float32, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># On \`AMDGPU.device()\` device.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">device!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">devices</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Switch to second device.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xd2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AMDPGU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Float32, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># On second device.</span></span></code></pre></div><p>Additionally, devices have an associated numeric ID. This value is bounded between <code>1</code> and <code>length(AMDGPU.devices())</code>, and device <code>1</code> is the default device when AMDGPU is first loaded. The ID of the device associated with the current task can be queried with <a href="/dev/api/devices#AMDGPU.device_id"><code>AMDGPU.device_id</code></a> and changed with <a href="/dev/api/devices#AMDGPU.device_id!"><code>AMDGPU.device_id!</code></a>.</p>`,7)),s("details",k,[s("summary",null,[i[0]||(i[0]=s("a",{id:"AMDGPU.HIP.devices",href:"#AMDGPU.HIP.devices"},[s("span",{class:"jlbinding"},"AMDGPU.HIP.devices")],-1)),i[1]||(i[1]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[3]||(i[3]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">devices</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Get list of all devices.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[2]||(i[2]=[s("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v1.3.4/src/hip/device.jl#L107-L111",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})]),s("details",c,[s("summary",null,[i[4]||(i[4]=s("a",{id:"AMDGPU.device",href:"#AMDGPU.device"},[s("span",{class:"jlbinding"},"AMDGPU.device")],-1)),i[5]||(i[5]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[8]||(i[8]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">device</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HIPDevice</span></span></code></pre></div><p>Get currently active device. This device is used when launching kernels via <code>@roc</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[6]||(i[6]=[s("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v1.3.4/src/tls.jl#L39-L44",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[6]}),i[9]||(i[9]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">device</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ROCArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HIPDevice</span></span></code></pre></div><p>Return the device associated with the array <code>A</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[7]||(i[7]=[s("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v1.3.4/src/array.jl#L31-L35",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[7]})]),s("details",u,[s("summary",null,[i[10]||(i[10]=s("a",{id:"AMDGPU.device!",href:"#AMDGPU.device!"},[s("span",{class:"jlbinding"},"AMDGPU.device!")],-1)),i[11]||(i[11]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[13]||(i[13]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">device!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(device</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HIPDevice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Switch current device being used. This switches only for a task inside which it is called.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[12]||(i[12]=[s("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v1.3.4/src/tls.jl#L47-L52",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[12]})]),s("details",g,[s("summary",null,[i[14]||(i[14]=s("a",{id:"AMDGPU.device_id",href:"#AMDGPU.device_id"},[s("span",{class:"jlbinding"},"AMDGPU.device_id")],-1)),i[15]||(i[15]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[17]||(i[17]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">device_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Int</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">device_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(device</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HIPDevice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Int</span></span></code></pre></div><p>Returns the numerical device ID for <code>device</code> or for the current <code>AMDGPU.device()</code>.</p>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[16]||(i[16]=[s("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v1.3.4/src/highlevel.jl#L1-L6",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[16]})]),s("details",v,[s("summary",null,[i[18]||(i[18]=s("a",{id:"AMDGPU.device_id!",href:"#AMDGPU.device_id!"},[s("span",{class:"jlbinding"},"AMDGPU.device_id!")],-1)),i[19]||(i[19]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[21]||(i[21]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">device_id!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(idx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Sets the current device to <code>AMDGPU.devices()[idx]</code>. See <a href="/dev/api/devices#AMDGPU.device_id"><code>device_id</code></a> for details on the numbering semantics.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[20]||(i[20]=[s("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v1.3.4/src/highlevel.jl#L10-L15",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[20]})]),i[43]||(i[43]=s("h2",{id:"Device-Properties",tabindex:"-1"},[l("Device Properties "),s("a",{class:"header-anchor",href:"#Device-Properties","aria-label":'Permalink to "Device Properties {#Device-Properties}"'},"â€‹")],-1)),s("details",y,[s("summary",null,[i[22]||(i[22]=s("a",{id:"AMDGPU.HIP.name",href:"#AMDGPU.HIP.name"},[s("span",{class:"jlbinding"},"AMDGPU.HIP.name")],-1)),i[23]||(i[23]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[25]||(i[25]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dev</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HIPDevice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span></span></code></pre></div><p>Get name of the device.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[24]||(i[24]=[s("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v1.3.4/src/hip/device.jl#L70-L74",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[24]})]),s("details",_,[s("summary",null,[i[26]||(i[26]=s("a",{id:"AMDGPU.HIP.wavefrontsize",href:"#AMDGPU.HIP.wavefrontsize"},[s("span",{class:"jlbinding"},"AMDGPU.HIP.wavefrontsize")],-1)),i[27]||(i[27]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[29]||(i[29]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">wavefrontsize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HIPDevice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Cint</span></span></code></pre></div><p>Get size of the wavefront. AMD GPUs support either 32 or 64.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[28]||(i[28]=[s("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v1.3.4/src/hip/device.jl#L32-L36",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[28]})]),s("details",E,[s("summary",null,[i[30]||(i[30]=s("a",{id:"AMDGPU.HIP.gcn_arch",href:"#AMDGPU.HIP.gcn_arch"},[s("span",{class:"jlbinding"},"AMDGPU.HIP.gcn_arch")],-1)),i[31]||(i[31]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[33]||(i[33]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gcn_arch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HIPDevice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span></span></code></pre></div><p>Get GCN architecture for the device.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[32]||(i[32]=[s("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v1.3.4/src/hip/device.jl#L39-L43",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[32]})]),s("details",b,[s("summary",null,[i[34]||(i[34]=s("a",{id:"AMDGPU.HIP.device_id",href:"#AMDGPU.HIP.device_id"},[s("span",{class:"jlbinding"},"AMDGPU.HIP.device_id")],-1)),i[35]||(i[35]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[37]||(i[37]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">device_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HIPDevice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Zero-based device ID as expected by HIP functions. Differs from <a href="/dev/api/devices#AMDGPU.device_id"><code>AMDGPU.device_id</code></a> method by <code>1</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[36]||(i[36]=[s("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v1.3.4/src/hip/device.jl#L24-L29",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[36]})]),s("details",P,[s("summary",null,[i[38]||(i[38]=s("a",{id:"AMDGPU.HIP.properties",href:"#AMDGPU.HIP.properties"},[s("span",{class:"jlbinding"},"AMDGPU.HIP.properties")],-1)),i[39]||(i[39]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[41]||(i[41]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dev</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HIPDevice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hipDeviceProp_t</span></span></code></pre></div><p>Get all properties for the device. See HIP documentation for <code>hipDeviceProp_t</code> for the meaning of each field.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>i[40]||(i[40]=[s("a",{href:"https://github.com/JuliaGPU/AMDGPU.jl/blob/v1.3.4/src/hip/device.jl#L81-L86",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[40]})])])}const G=d(o,[["render",A]]);export{T as __pageData,G as default};
